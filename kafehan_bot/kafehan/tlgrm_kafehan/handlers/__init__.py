import os
import locale
import re
import time
from datetime import datetime
from urllib.request import urlopen

from kafehan.models import *
from kafehan.tlgrm_kafehan import txt, kbs
from kafehan.tlgrm_kafehan.bot import t
from kafehan.tlgrm_kafehan.kbs import b, bt
from kafehan_bot.settings import MEDIA_ROOT
from ksk_util.dump import add_dump_txt

locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

mid_kb = dict()
msg_wait = dict()


@t.message_handler('/start')
def start(uid, mid):
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()
    user = Client.objects.filter(idu=uid).first()
    admins = [i.uid.idu for i in AdminKafeHan.objects.all()]

    if not user:
        udata = t.get_tg_user(uid)
        user = Client(
            idu=uid,
            username=udata.get('username', ''),
            first_name=udata.get('first_name', ''),
            last_name=udata.get('last_name', '')
        )
        photo_url = t.get_user_photo(uid)

        if photo_url:
            now = datetime.now()
            photo_dir_path = f'kafehan/clients/photo/{now.year}/{now.month}/{now.day}/'
            if not os.path.exists(os.path.join(MEDIA_ROOT, photo_dir_path)):
                os.makedirs(os.path.join(MEDIA_ROOT, photo_dir_path))
            photob = urlopen(photo_url).read()
            with open(os.path.join(MEDIA_ROOT, photo_dir_path + str(uid) + '.jpg'), 'wb') as f:
                f.write(photob)
            user.photo = photo_dir_path + str(uid) + '.jpg'

    user.save()

    t.send(
        uid,
        ('üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!\n–ù–∞–π–¥–∏—Ç–µ –¥–ª—è —Å–µ–±—è —Å–∞–º–æ–µ –≤–∫—É—Å–Ω–æ–µ –±–ª—é–¥–æüòã, –∏ –º—ã –±—É–¥–µ–º —Ä–∞–¥–æ–≤–∞—Ç—å –í–∞—Å –∏–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!üóì\n'
         '\n–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ ‚ùî–≤–æ–ø—Ä–æ—Å–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–∞–±–æ—Ç–æ–π –∫–∞—Ñ–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: üí¨@kafehan_admin, –ª–∏–±–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å üìû+79269404111.\n '
         '\nüÜò–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞ü§ñ, —Å—é–¥–∞: üí¨@tgkamask –∏–ª–∏ üìû+79256233500'),
        safe=True)

    time.sleep(5)

    kb = (([[b('‚úîÔ∏è –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑', 'order')]] if order else [])
          + [[kbs.menu], [kbs.orders]]
          + ([[bt('üîì –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ')]] if uid in admins else []))
    global mid_kb
    mid_kb[uid] = t.send(
        uid,
        '–ö—Å—Ç–∞—Ç–∏ –í–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ –í—ã –Ω–∞—à —Å–∞–º—ã–π –ª—É—á—à–∏–π –∫–ª–∏–µ–Ω—Çü§¥üèª!\nüì£ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–∫–∏–¥–∞–∫–∞–º–∏ –∏ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –±–ª—é–¥ –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ @KafeHan',
        kb=kb, safe=True)

    time.sleep(1)

    t.send(uid, txt.main, photo='https://kafehan-bot.webitmaster.ru/s/kafehan/natur.png')
    t.delete(uid, mid)


@t.message_handler('üìñ –ú–µ–Ω—é')
def menu(uid, mid):
    t.delete(uid, mid)
    cats = Category.objects.all()
    ikb = [[b(str(i), "cat_" + str(i.pk))] for i in cats]
    t.send(uid, 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', ikb=ikb)


@t.message_handler('üïí –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤')
def orders(uid, mid):
    t.delete(uid, mid)
    orders = Order.objects.filter(client__idu=uid).exclude(status__slag='start')
    text = 'ü§∑ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.' if not len(orders) else 'üïí –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:'
    wait = orders.filter(status__slag='wait_access')
    access = orders.filter(status__slag='access')
    done = orders.filter(status__slag='done')
    canceled = orders.filter(status__slag='canceled')
    ikb = [[]]
    if wait:
        ikb += [[b('üìå –ñ–¥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', 'orders_wait_access')]]
    if access:
        ikb += [[b('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ', 'orders_access')]]
    if done:
        ikb += [[b('üî∞ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ', 'orders_done')]]
    if canceled:
        ikb += [[b('üö∑ –û—Ç–º–µ–Ω–µ–Ω—ã', 'orders_canceled')]]
    t.send(uid, text, ikb=ikb)


@t.message_handler('‚úîÔ∏è –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑')
def current_order(uid, mid):
    t.delete(uid, mid)
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()
    order_calc(order)
    if order:
        text = 'üìã –ó–∞–∫–∞–∑ ‚Ññ' + str(order.pk) + '\n\n'
        prod_list = OrderList.objects.filter(order=order)
        i = 0
        for p in prod_list:
            i += 1
            text += f'{i}.) {p.product.title}\_\_{str(p.count)}—à—Ç.\_\_{str(p.product.cost * p.count)}‚ÇΩ\n'
        text += f'\nüí∞ *–ò—Ç–æ–≥–æ: {order.cost}‚ÇΩ*'
        t.send(uid, text, markdown=True, ikb=kbs.ikb_order)
    else:
        t.send(uid, 'üö∑ –£ –í–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞.')


@t.callback_handler('menu')
def cb_menu(uid, mid):
    t.delete(uid, mid)
    cats = Category.objects.all()
    ikb = [[b(str(i), "cat_" + str(i.pk))] for i in cats]
    t.send(uid, 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', ikb=ikb)


@t.re_callback_handler(r'cat_(\d+)$')
def catalog(uid, mid, data):
    t.delete(uid, mid)
    cats = Category.objects.all()
    cat = cats.filter(pk=data[0]).first()
    other_cats = cats.exclude(pk=data[0])
    prods = cat.product_set.all()
    ikb = [[b(str(i), "cat_" + str(i.pk))] for i in other_cats]

    t.send(uid, '‚úî –í—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª - ' + str(cat), ikb=ikb)
    for p in prods:
        if p.visible:
            description = "_" + p.description + "_\n"
            text = (f'\n*{p.title}*{(" / (" + p.weight + ")") if p.weight else ""}\n'
                    f'{description if p.description else ""}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {p.cost}‚ÇΩ\n')
            t.send(
                uid, text,
                photo=('https://kafehan-bot.webitmaster.ru/' + p.photo.url) if p.photo else None,
                markdown=True, ikb=[[b('–î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑', 'prod_' + str(p.pk))]])
    t.send(uid, '‚úî –í—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª - ' + str(cat), ikb=ikb)


@t.re_callback_handler(r'prod_(\d+)$')
def product(uid, mid, data):
    t.delete(uid, mid)
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()
    p = Product.objects.filter(pk=data[0]).first()
    has = None
    if order:
        has = OrderList.objects.filter(order=order, product=p).first()
    description = "_" + p.description + "_\n"
    text = (f'\n*{p.title}*{(" / (" + p.weight + ")") if p.weight else ""}\n'
            f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {p.cost}‚ÇΩ\n')
    if has:
        text += (f"\n–í –∑–∞–∫–∞–∑–µ ‚Ññ{str(order)} –¥–æ–±–∞–≤–ª–µ–Ω–æ {has.count}—à—Ç.\n\n"
                 f"üëá *–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏*")
    else:
        text += "\nüëá *–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏*"

    ikb = ([[
        b('1Ô∏è‚É£', 'add_prod_1|' + str(data[0]) + '|' + (str(has.pk) if has else '')),
        b('2Ô∏è‚É£', 'add_prod_2|' + str(data[0]) + '|' + (str(has.pk) if has else '')),
        b('3Ô∏è‚É£', 'add_prod_3|' + str(data[0]) + '|' + (str(has.pk) if has else '')),
        b('4Ô∏è‚É£', 'add_prod_4|' + str(data[0]) + '|' + (str(has.pk) if has else '')),
        b('5Ô∏è‚É£', 'add_prod_5|' + str(data[0]) + '|' + (str(has.pk) if has else ''))]] +
           [[b('‚úñ –£–¥–∞–ª–∏—Ç—å –∏–∑ –∑–∞–∫–∞–∑–∞', 'prodDelete_' + str(has.pk))] if has else []] +
           [[b('‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é - ' + str(p.category), 'cat_' + str(p.category.pk))]])

    midd = t.send(uid, text,
                  photo=('https://kafehan-bot.webitmaster.ru/' + p.photo.url) if p.photo else None,
                  ikb=ikb, markdown=True)

    msg_wait[uid] = 'add_' + str(midd) + '_' + str(p.pk)
    if has:
        msg_wait[uid] += '_' + str(has.pk)


@t.re_callback_handler(r'add_prod_([\d|]+)$')
def add_prod_cb_handler(uid, mid, data):
    data = data[0].split('|')
    add_prod(uid, data[1], data[0], data[2])


def order_calc(order):
    delevery = OrderType.objects.filter(slag='delevery').first()
    prod_list = OrderList.objects.filter(order=order)
    summ = 0
    for p in prod_list:
        summ += p.product.cost * p.count
    if delevery == order.type:
        summ += int(re.search(r'\+(\d+)', delevery.name).group(1))
    order.cost = summ
    order.save()


def add_prod(uid, prod_id, count, has):
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()
    user = Client.objects.filter(idu=uid).first()
    prod = Product.objects.filter(pk=int(prod_id)).first()
    if not order:
        status = OrderStatus.objects.filter(slag='start').first()
        order = Order(client=user, status=status)
        order.save()
        kb = ([[b('‚úî –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑', 'order')]] if order else []) + [[kbs.menu], [kbs.orders]]
        global mid_kb
        t.delete(uid, mid_kb[uid])

        mid_kb[uid] = t.send(
            uid,
            '–ö—Å—Ç–∞—Ç–∏ –í–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ –í—ã –Ω–∞—à —Å–∞–º—ã–π –ª—É—á—à–∏–π –∫–ª–∏–µ–Ω—Çü§¥üèª!\nüì£ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–∫–∏–¥–∞–∫–∞–º–∏ –∏ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –±–ª—é–¥ –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ @KafeHan',
            kb=kb, safe=True)

    if not has:
        OrderList.objects.create(order=order, product=prod, count=int(count))
    else:
        has = OrderList.objects.filter(pk=int(has)).first()
        has.count = int(count)
        has.save()
    order_calc(order)
    text = (f'‚úî {prod.title} {count}—à—Ç. {str(prod.cost * int(count))}‚ÇΩ\n'
            f'{"–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑" if not has else "–∏–∑–º–µ–Ω–µ–Ω–æ –≤ –∑–∞–∫–∞–∑–µ"} ‚Ññ{str(order)}')
    t.send(uid, text)
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()
    text = 'üìã –ó–∞–∫–∞–∑ ‚Ññ' + str(order.pk) + '\n\n'
    prod_list = OrderList.objects.filter(order=order)
    i = 0
    for p in prod_list:
        i += 1
        text += f'{i}.) {p.product.title}\_\_{str(p.count)}—à—Ç.\_\_{str(p.product.cost * p.count)}‚ÇΩ\n'
    text += f'\nüí∞ *–ò—Ç–æ–≥–æ: {order.cost}‚ÇΩ*'
    t.send(uid, text, markdown=True, ikb=kbs.ikb_order)


@t.re_message_handler(r'(.+)')
def in_msg(uid, mid, data):
    t.delete(uid, mid)
    if uid in msg_wait:
        data_wait = msg_wait[uid].split('_')
        if uid in msg_wait:
            data_wait = msg_wait[uid].split('_')
            if data_wait[0] == 'add':
                if data[0].isdigit() and int(data[0]) > 0:
                    del (msg_wait[uid])
                    has = None
                    if len(data_wait) == 4:
                        has = data_wait[3]
                        t.delete(uid, data_wait[1])
                    add_prod(uid, data_wait[2], data[0], has)
                else:
                    t.send(uid, '‚Äº –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ—Ä—Ü–∏–π, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑!')
            elif data_wait[0] == 'delevery':
                del (msg_wait[uid])
                order = Order.objects.filter(client__idu=uid, status__slag='start').first()
                order.address = data[0]
                order.save()
                poll_select_pay_type(uid)
            elif data_wait[0] == 'comment':
                del(msg_wait[uid])
                order = Order.objects.filter(client__idu=uid, status__slag='start').first()
                order.comment = data[0]
                order.save()
                access_order(uid)
            elif data_wait[0] == 'tel':
                del(msg_wait[uid])
                order = Order.objects.filter(client__idu=uid, status__slag='start').first()
                user = Client.objects.filter(idu=uid).first()
                user.number = data[0]
                order.number = data[0]
                user.save()
                order.save()
                wait_access(uid)
        else:
            t.send(uid, '‚Äº –ù–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞')
    else:
        t.send(uid, '‚Äº –ù–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞')


@t.location_handler()
def location(uid, mid, loc):
    if uid in msg_wait and msg_wait[uid] == 'delevery':
        del (msg_wait[uid])
        t.delete(uid, mid)
        order = Order.objects.filter(client__idu=uid, status__slag='start').first()
        order.address = f'loc|{loc["latitude"]}|{loc["longitude"]}'
        order.save()
        poll_select_pay_type(uid)


@t.re_callback_handler(r'prodDelete_(\d+)$')
def prod_delete(uid, mid, data):
    t.delete(uid, mid)
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()
    order_list = OrderList.objects.filter(order=order)
    if len(order_list) == 1:
        kb = [[kbs.menu], [kbs.orders]]
        global mid_kb
        midd = mid_kb.get(uid, False)
        if midd:
            t.delete(uid, midd)

            mid_kb[uid] = t.send(
                uid,
                '–ö—Å—Ç–∞—Ç–∏ –í–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ –í—ã –Ω–∞—à —Å–∞–º—ã–π –ª—É—á—à–∏–π –∫–ª–∏–µ–Ω—Çü§¥üèª!\nüì£ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–∫–∏–¥–∞–∫–∞–º–∏ –∏ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –±–ª—é–¥ –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ @KafeHan',
                kb=kb, safe=True)

        t.send(uid, f'‚≠ï –í –∑–∞–∫–∞–∑–µ ‚Ññ{str(order)} –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–ª—é–¥, –ø–æ—ç—Ç–æ–º—É –æ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω.')
        if order:
            order.delete()
    else:
        p = order_list.filter(pk=data[0]).first()
        p.delete()
        order_calc(order)
        t.send(uid, f'‚ùå {p.product.title} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∑–∞–∫–∞–∑–∞ ‚Ññ' + str(order))


@t.callback_handler('edit')
def edit_order(uid, mid):
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()
    prod_list = OrderList.objects.filter(order=order)
    kb = [[]]
    for p in prod_list:
        kb += [[b(p.product.title + ' ' + str(p.count) + '—à—Ç.', 'prod_' + str(p.product.pk))]]
    t.send(uid, 'üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç', ikb=kb)


@t.callback_handler('delete')
def delete_order(uid, mid):
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()
    t.send(uid, 'üö´ –ó–∞–∫–∞–∑ ‚Ññ' + str(order) + ' —É–¥–∞–ª—ë–Ω.')
    kb = [[kbs.menu], [kbs.orders]]
    global mid_kb
    midd = mid_kb.get(uid, False)

    if midd:
        t.delete(uid, midd)
        mid_kb[uid] = t.send(
            uid,
            '–ö—Å—Ç–∞—Ç–∏ –í–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ –í—ã –Ω–∞—à —Å–∞–º—ã–π –ª—É—á—à–∏–π –∫–ª–∏–µ–Ω—Çü§¥üèª!\nüì£ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–∫–∏–¥–∞–∫–∞–º–∏ –∏ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –±–ª—é–¥ –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ @KafeHan',
            kb=kb, safe=True)

    if order:
        order.delete()


@t.callback_handler('skip_comment')
def skip_comment(uid, mid):
    del (msg_wait[uid])
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()
    order.comment = ""
    order.save()
    access_order(uid)


def get_comment(uid):
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()
    text = '–Ω—É–∂–Ω–æ –Ω–∞–∫—Ä—ã—Ç—å –Ω–∞ —Å—Ç–æ–ª' if order.type.slag == 'table' else '—Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑'

    t.send(uid,
           '‚úí –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∑–∞—É, –∞ —Ç–∞–∫–∂–µ –≤—Ä–µ–º—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É ' + text,
           ikb=[[b('‚û° –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip_comment')]])
    msg_wait[uid] = 'comment'


def poll_select_pay_type(uid):
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()
    pay_types = OrderPayType.objects.all()
    opt_pay = [i.name for i in pay_types]
    opt_pay_slag = [i.slag for i in pay_types]

    def cb_pay_type(uid, data):
        order.pay = OrderPayType.objects.filter(slag=opt_pay_slag[data[0]]).first()
        order.save()
        get_comment(uid)

    t.poll(uid, 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã ', opt_pay, cb_pay_type)


@t.callback_handler('access')
def access(uid, mid):
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()

    types = OrderType.objects.all()

    opt = [i.name for i in types]
    opt_slag = [i.slag for i in types]

    def cb(uid, data):
        order.type = OrderType.objects.filter(slag=opt_slag[data[0]]).first()
        order.save()

        if order.type.slag == 'kassa':
            poll_select_pay_type(uid)
        elif order.type.slag == 'delevery':
            msg_wait[uid] = 'delevery'
            t.send(uid, 'üåè –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é')
        elif order.type.slag == 'table':
            tables = Table.objects.all()
            t.send(uid, 'üëá –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–æ–ª')
            for tb in tables:
                t.send(
                    uid,
                    '–°—Ç–æ–ª ‚Ññ' + str(tb.num),
                    photo='https://kafehan-bot.webitmaster.ru' + tb.photo.url,
                    ikb=[[b('–í—ã–±—Ä–∞—Ç—å', 'table_' + str(tb.num))]])

    t.poll(uid, 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è', opt, cb)


@t.re_callback_handler(r'table_(\d+)$')
def select_table(uid, mid, data):
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()
    order.table = Table.objects.filter(num=int(data[0])).first()
    order.save()
    poll_select_pay_type(uid)


@t.callback_handler('select_number_user')
def select_number_user(uid, mid):
    del (msg_wait[uid])
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()
    user = Client.objects.filter(idu=uid).first()
    order.number = user.number
    order.save()
    wait_access(uid)


def access_order(uid):
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()
    user = Client.objects.filter(idu=uid).first()
    delevery_cost = int(re.search(r'\+(\d+)', OrderType.objects.filter(slag='delevery').first().name).group(1))

    if order.type.slag == 'kassa':
        if order.address:
            order.address = None
        if order.table:
            order.table = None
    if order.type.slag == 'delevery':
        if order.table:
            order.table = None
    if order.type.slag == 'table':
        if order.address:
            order.address = None

    order_calc(order)
    text = 'üìã –ó–∞–∫–∞–∑ ‚Ññ' + str(order.pk) + '\n\n'
    prod_list = OrderList.objects.filter(order=order)
    i = 0
    for p in prod_list:
        i += 1
        text += f'{i}.) {p.product.title}\_\_{str(p.count)}—à—Ç.\_\_{str(p.product.cost * p.count)}‚ÇΩ\n'
    if order.type.slag == 'delevery':
        text += f'\n–î–æ—Å—Ç–≤–∫–∞ - {str(delevery_cost)}‚ÇΩ\n'
    text += f'''
üí∞ *–ò—Ç–æ–≥–æ: {order.cost}‚ÇΩ*

–ü–æ–ª—É—á–µ–Ω–∏–µ: {order.type}
'''

    if order.type.slag == 'delevery':
        text += '\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ' + ('–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è' if order.address[:3] == 'loc' else order.address)
    if order.type.slag == 'table':
        text += '\n–°—Ç–æ–ª –Ω–æ–º–µ—Ä: ' + str(order.table.num)

    text += f"""
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment if order.comment else '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}
–û–ø–ª–∞—Ç–∞: {order.pay.name}

‚òé *–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*
    """

    ikb = [[b('üì≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ' + user.number, 'select_number_user')]] if user.number else None
    msg_wait[uid] = 'tel'
    t.send(uid, text, ikb=ikb, markdown=True)
    if order.address and order.address[:3] == 'loc':
        loc = order.address.split('|')
        t.send_location(uid, loc[1], loc[2])


def wait_access(uid):
    admins = [i.uid.idu for i in AdminKafeHan.objects.all()]
    order = Order.objects.filter(client__idu=uid, status__slag='start').first()
    order_status = OrderStatus.objects.filter(slag='wait_access').first()
    order.status = order_status
    order.dateOrder = datetime.now()
    order.save()
    kb = [[kbs.menu], [kbs.orders]]
    global mid_kb
    midd = mid_kb.get(uid, False)

    if midd:
        t.delete(uid, midd)
        mid_kb[uid] = t.send(
            uid,
            '–ö—Å—Ç–∞—Ç–∏ –í–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ –í—ã –Ω–∞—à —Å–∞–º—ã–π –ª—É—á—à–∏–π –∫–ª–∏–µ–Ω—Çü§¥üèª!\nüì£ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–∫–∏–¥–∞–∫–∞–º–∏ –∏ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –±–ª—é–¥ –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ @KafeHan',
            kb=kb, safe=True)

    t.send(
        uid,
        ('‚úÖ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é'
         + (', –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –í—ã —Å–º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –æ–Ω–ª–∞–π–Ω' if order.pay.slag == 'online' else '')))

    for a in admins:
        t.send(a, '‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:', ikb=[[b(f'‚Ññ{str(order)} - {str(order.cost)}‚ÇΩ', 'order_' + str(order))]])


@t.re_callback_handler(r'orders_((wait_access|access|done|canceled))$')
def orders_list(uid, mid, data):
    orders = Order.objects.filter(client__idu=uid, status__slag=data[0])
    ikb = [[]]

    if data[0] in ['done', 'canceled']:
        orders = orders[:20]

    if data[0] == 'wait_access':
        text = '‚òë –ñ–¥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:'
    elif data[0] == 'access':
        text = '‚úî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ:'
    elif data[0] == 'canceled':
        text = '‚≠ï  –û—Ç–º–µ–Ω–µ–Ω—ã:'
    else:
        text = '‚úÖ  –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ:'

    for o in orders:
        if data[0] == 'wait_access':
            date = o.dateOrder
        elif data[0] == 'access':
            date = o.dateAccess
        elif data[0] == 'canceled':
            date = o.dateCanceled
        else:
            date = o.dateDone
        order_calc(o)
        ikb += [[b(f'‚Ññ{str(o.pk)}) {str(date.strftime("%d%B%Y–≥. %H:%M"))} - {str(o.cost)}‚ÇΩ', 'order_' + str(o.pk))]]
    t.send(uid, text, ikb=ikb)


@t.re_callback_handler(r'order_(\d+)$')
def order_one(uid, mid, data):
    order = Order.objects.filter(pk=data[0]).first()
    admins = [i.uid.idu for i in AdminKafeHan.objects.all()]
    status = order.status
    payed = '–æ–ø–ª–∞—á–µ–Ω–æ' if order.payed else '–ù–ï–æ–ø–ª–∞—á–µ–Ω–æ'
    delevery_cost = int(re.search(r'\+(\d+)', OrderType.objects.filter(slag='delevery').first().name).group(1))

    order_calc(order)

    text = 'üìã –ó–∞–∫–∞–∑ ‚Ññ' + str(order.pk) + '\n\n'
    prod_list = OrderList.objects.filter(order=order)
    i = 0
    for p in prod_list:
        i += 1
        text += f'{i}.) {p.product.title}\_\_{str(p.count)}—à—Ç.\_\_{str(p.product.cost * p.count)}‚ÇΩ\n'
    if order.type.slag == 'delevery':
        text += f'\n–î–æ—Å—Ç–≤–∫–∞ - {str(delevery_cost)}‚ÇΩ\n'
    text += f'''
üí∞ *–ò—Ç–æ–≥–æ: {order.cost}‚ÇΩ*

–ü–æ–ª—É—á–µ–Ω–∏–µ: {order.type}
    '''

    if order.type.slag == 'delevery':
        text += '\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ' + ('–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è' if order.address[:3] == 'loc' else order.address)
    if order.type.slag == 'table':
        text += '\n–°—Ç–æ–ª –Ω–æ–º–µ—Ä: ' + str(order.table.num)

    text += f"""
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment if order.comment else '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}
–û–ø–ª–∞—Ç–∞: {order.pay.name}
–¢–µ–ª–µ—Ñ–æ–Ω: {order.number}
        """

    ikb = [[]]
    if status.slag in ['access', 'wait_access']:
        ikb += [[b('üö∑ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', 'order_cancel_'+str(order))]]
    if status.slag == 'done' and uid == order.client.idu:
        ikb += [[b('‚ôª –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑', 'order_repeat_' + str(order))]]
    if status.slag == 'canceled':
        ikb += [[b('‚ôª –ü–æ–≤—Ç–æ—Ä–∏—Ç—å', 'order_repeat_' + str(order))]]

    if uid in admins:
        if order.dateOrder:
            text += '\n–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ' + order.dateOrder.strftime("%d%B%Y–≥. %H:%M")
        if order.dateAccess:
            text += '\n–î–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ' + order.dateAccess.strftime("%d%B%Y–≥. %H:%M")
        if order.dateDone:
            text += '\n–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ' + order.dateDone.strftime("%d%B%Y–≥. %H:%M")
        if order.dateCanceled:
            text += '\n–î–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã: ' + order.dateCanceled.strftime("%d%B%Y–≥. %H:%M")

        text += f"""
–°—Ç–∞—Ç—É—Å: {status.name} {'–∫–ª–∏–µ–Ω—Ç–æ–º' if status.slag == 'canceled' and order.canceled == order.client.idu else ''}
–û–ø–ª–∞—Ç–∞: {payed}

\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
    id: {str(order.client)}
    login: {order.client.username if order.client.username else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
    –ò–º—è: {order.client.first_name if order.client.first_name else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
    –§–∞–º–∏–ª–∏—è: {order.client.last_name if order.client.last_name else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {order.client.created_at.strftime("%d%B%Y–≥. %H:%M")}
        """
        if status.slag == 'wait_access':
            ikb += [[b('‚òëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', 'order_access_' + str(order))]]
        if status.slag == 'access' and not order.payed:
            ikb += [[b('üí∏ –ü—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É', 'order_payed_' + str(order))]]
        if status.slag != 'done':
            ikb += [[b('‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å', 'order_' + str(order))]]
        if status.slag == 'access' and order.payed:
            ikb += [[b('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑', 'order_done_' + str(order))]]

    photo = 'https://kafehan-bot.webitmaster.ru' + order.client.photo.url if order.client.photo and uid in admins else None

    t.send(uid, text, ikb=ikb, markdown=True, photo=photo)
    if order.address and order.address[:3] == 'loc':
        t.send_location(uid, order.address.split('|')[1], order.address.split('|')[2])
