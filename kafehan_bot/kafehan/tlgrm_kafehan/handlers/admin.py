import re
import json
import uuid
from datetime import datetime
import requests
from requests.auth import HTTPBasicAuth


from config import YK_SHOP_ID, YK_SHOP_API_TOKEN
from kafehan.models import *
from kafehan.tlgrm_kafehan import kbs
from kafehan.tlgrm_kafehan.bot import t
from kafehan.tlgrm_kafehan.kbs import b, bu
from ksk_util.dump import add_dump_txt
from . import order_calc

admins = [i.uid.idu for i in AdminKafeHan.objects.all()]


@t.message_handler('üîì –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', admins)
def administration(uid, mid):
    t.delete(uid, mid)
    orders = Order.objects.exclude(status__slag='start')
    wait = orders.filter(status__slag='wait_access')
    access = orders.filter(status__slag='access')
    done = orders.filter(status__slag='done')
    canceled = orders.filter(status__slag='canceled')

    ikb = [[]]
    if wait:
        ikb += [[b('‚òë –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', 'admin_orders_wait_access')]]
    if access:
        ikb += [[b('‚úî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã', 'admin_orders_access')]]
    if done:
        ikb += [[b('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ã', 'admin_orders_done')]]
    if canceled:
        ikb += [[b('üö´ –û—Ç–º–µ–Ω–µ–Ω—ã', 'admin_orders_canceled')]]
    t.send(uid, 'üîì –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:', ikb=ikb)


@t.re_callback_handler(r'admin_orders_((wait_access|access|done|canceled))$', admins)
def admin_orders(uid, mid, data):
    orders = Order.objects.filter(status__slag=data[0])
    if data[0] in ['done', 'canceled']:
        orders = orders[:20]
    ikb = [[]]
    if data[0] == 'wait_access':
        text = '‚òë –ñ–¥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:'
    elif data[0] == 'access':
        text = '‚úî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ:'
    elif data[0] == 'canceled':
        text = 'üö´ –û—Ç–º–µ–Ω–µ–Ω—ã:'
    else:
        text = '‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ:'
    for o in orders:
        order_calc(o)
        if data[0] == 'wait_access':
            date = o.dateOrder.strftime("%d%B%Y–≥. %H:%M") if o.dateOrder else ''
        elif data[0] == 'access':
            date = o.dateAccess.strftime("%d%B%Y–≥. %H:%M") if o.dateAccess else ''
        elif data[0] == 'canceled':
            date = o.dateCanceled.strftime("%d%B%Y–≥. %H:%M") if o.dateCanceled else ''
        else:
            date = o.dateDone.strftime("%d%B%Y–≥. %H:%M") if o.dateDone else ''
        ikb += [[b(f'‚Ññ{str(o.pk)}) {str(date)} - {str(o.cost)}‚ÇΩ', 'order_' + str(o))]]

    t.send(uid, text, ikb=ikb)


@t.re_callback_handler(r'order_cancel_(\d+)$')
def order_canceled(uid, mid, data):
    order = Order.objects.filter(pk=data[0]).first()
    order.status = OrderStatus.objects.filter(slag='canceled').first()
    order.dateCanceled = datetime.now()
    order.canceled = uid
    order.save()
    if uid != order.client.idu and uid in admins:
        t.send(order.client.idu, '‚õî –ó–∞–∫–∞–∑ ‚Ññ' + str(order) + ' –æ—Ç–º–µ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')
    if uid == order.client.idu:
        for a in admins:
            t.send(a, '‚õî –ó–∞–∫–∞–∑ ‚Ññ' + str(order) + ' –æ—Ç–º–µ–Ω—ë–Ω –∫–ª–∏–µ–Ω—Ç–æ–º!')
    t.send(uid, '‚õî –ó–∞–∫–∞–∑ ‚Ññ' + str(order) + ' –æ—Ç–º–µ–Ω—ë–Ω!')


@t.re_callback_handler(r'order_repeat_(\d+)$')
def repeat_order(uid, mid, data):
    client = Order.objects.filter(pk=data[0]).first().client
    if Order.objects.filter(client__idu=client.idu, status__slag='start').first():
        t.send(
            uid,
            '‚õî –°—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑, –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ. '
            '–ó–∞—Ç–µ–º –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ª—é–±–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑.')
        return
    order = Order(client=client, status=OrderStatus.objects.filter(slag='start').first())
    order.save()
    summ = 0
    for p in OrderList.objects.filter(order=data[0]):
        OrderList.objects.create(order=order, product=p.product, count=p.count)
        summ += p.product.cost * p.count
    order.cost = summ
    order.save()
    text = 'üìã –ó–∞–∫–∞–∑ ‚Ññ' + str(order.pk) + '\n\n'
    prod_list = OrderList.objects.filter(order=order)
    i = 0
    for p in prod_list:
        i += 1
        text += f'{i}.) {p.product.title}\_\_{str(p.count)}—à—Ç.\_\_{str(p.product.cost * p.count)}‚ÇΩ\n'
    from . import mid_kb
    text += f'\nüí∞ *–ò—Ç–æ–≥–æ: {order.cost}‚ÇΩ*'
    kb = ([[b('üìå –¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑', 'order')]] if order else []) + [[kbs.menu], [kbs.orders]]
    if uid == order.client.idu:
        t.delete(uid, mid_kb[uid])
        mid_kb[uid] = t.send(
            uid,
            '–ö—Å—Ç–∞—Ç–∏ –í–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ –í—ã –Ω–∞—à —Å–∞–º—ã–π –ª—É—á—à–∏–π –∫–ª–∏–µ–Ω—Çü§¥üèª!',
            kb=kb, safe=True)
        t.send(uid, text, markdown=True, ikb=kbs.ikb_order)
    else:
        t.send(uid, '–ó–∞–∫–∞–∑ –ø–æ–≤—Ç–æ—Ä—ë–Ω, –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.')
        t.delete(order.client.idu, mid_kb[order.client.idu])
        mid_kb[order.client.idu] = t.send(
            order.client.idu,
            '–ö—Å—Ç–∞—Ç–∏ –í–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ –í—ã –Ω–∞—à —Å–∞–º—ã–π –ª—É—á—à–∏–π –∫–ª–∏–µ–Ω—Çü§¥üèª!',
            kb=kb, safe=True)
        t.send(order.client.idu, 'üñä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–≤—Ç–æ—Ä—ë–Ω –≤–∞—à –∑–∞–∫–∞–∑, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ.')
        t.send(order.client.idu, text, markdown=True, ikb=kbs.ikb_order)


@t.re_callback_handler(r'order_access_(\d+)', admins)
def order_access_one(uid, mid, data):
    order = Order.objects.filter(pk=data[0]).first()
    order.status = OrderStatus.objects.filter(slag='access').first()
    order.dateAccess = datetime.now()
    order.save()

    text = (f' ‚ùï –î–æ –ª–∏–±–æ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {str(order.cost)}‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É '
            '–°–±–µ—Ä–±–∞–Ω–∫ Visa 4276 3800 1966 5251 —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: ' + str(order)
            + '.\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ë–æ–∑–æ—Ä–±–æ–µ–≤ –ú—É—Ö–∞–º–º–∞–¥—é–Ω—É—Å –Æ–ª–¥–∞—à–±–æ–π.')

    t.send(
        order.client.idu,
        f'‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{str(order)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!'
        + (text if order.pay.slag == 'perevod' else ''))

    if order.pay.slag == 'online':
        delevery_cost = int(re.search(r'\+(\d+)', OrderType.objects.filter(slag='delevery').first().name).group(1))

        text = 'üìã –ó–∞–∫–∞–∑ ‚Ññ' + str(order) + '\n\n'
        prod_list = OrderList.objects.filter(order=order)
        i = 0
        for p in prod_list:
            i += 1
            text += f'{i}.) {p.product.title}\_\_{str(p.count)}—à—Ç.\_\_{str(p.product.cost * p.count)}‚ÇΩ\n'
        if order.type.slag == 'delevery':
            text += f'\n–î–æ—Å—Ç–≤–∫–∞ - {str(delevery_cost)}‚ÇΩ\n'
        text += f'''
        üí∞ *–ò—Ç–æ–≥–æ: {order.cost}‚ÇΩ*

        –ü–æ–ª—É—á–µ–Ω–∏–µ: {order.type}
            '''

        if order.type.slag == 'delevery':
            text += '\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ' + ('–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è' if order.address[:3] == 'loc' else order.address)
        if order.type.slag == 'table':
            text += '\n–°—Ç–æ–ª –Ω–æ–º–µ—Ä: ' + str(order.table.num)

        text += f"""
        –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment if order.comment else '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}
        –û–ø–ª–∞—Ç–∞: {order.pay.name}
        –¢–µ–ª–µ—Ñ–æ–Ω: {order.number}
                """

        url_pay = create_online_payment(order)

        if url_pay:
            t.send(
                order.client.idu,
                '‚ùï –î–ª—è –æ–ø–ª–∞—Ç—ã –æ–Ω–ª–∞–π–Ω –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.',
                ikb=[
                    [bu('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å ' + str(order.cost) + '‚ÇΩ', url_pay)],
                    [b('üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', 'order_cancel_' + str(order))]
                ])

    t.send(uid, f'‚òë –ó–∞–∫–∞–∑ ‚Ññ{str(order)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!', ikb=[[b('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 'order_' + str(order))]])


def create_online_payment(order):
    try:
        res = requests.post(
            'https://payment.yandex.net/api/v3/payments',
            headers={
                'Idempotence-Key': str(uuid.uuid4()),
                'Content-Type': 'application/json; charset utf-8',
            },
            data=json.dumps({
                "amount": {
                    "value": order.cost,
                    "currency": "RUB"
                },
                "capture": True,
                "confirmation": {
                    "type": "redirect",
                    "return_url": "t.me/kafeHanBot"
                },
                "description": '–ó–∞–∫–∞–∑ ‚Ññ' + str(order)
            }).encode('utf-8'),
            auth=HTTPBasicAuth(YK_SHOP_ID, YK_SHOP_API_TOKEN)).json()
    except Exception as e:
        # dump_add(e)
        # dump_add(traceback.format_exc())
        res = None

    if res and 'confirmation' in res:
        OnlinePay.objects.create(id_pay=res['id'], status=res['status'], order=order, cost=order.cost)
        res = res['confirmation']['confirmation_url']
    return res


@t.pre_checkout_handler()
def pre_checkout(data):
    t.request('answerPreCheckoutQuery', {
        'pre_checkout_query_id': data['id'],
        'ok': True
    })


@t.re_callback_handler(r'order_payed_(\d+)$', admins)
def order_payed(uid, mid, data):
    order = Order.objects.filter(pk=data[0]).first()
    order.payed = True
    order.save()
    for a in admins:
        t.send(a, '‚úî –ó–∞–∫–∞–∑ ‚Ññ' + str(order) + ': –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!', ikb=[[b('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 'order_' + str(order))]])
    t.send(order.client.idu, '‚úî –ó–∞–∫–∞–∑ ‚Ññ' + str(order) + ': –æ–ø–ª–∞—á–µ–Ω!')


@t.re_callback_handler(r'order_done_(\d+)$', admins)
def order_payed(uid, mid, data):
    order = Order.objects.filter(pk=data[0]).first()
    order.status = OrderStatus.objects.filter(slag='done').first()
    order.dateDone = datetime.now()
    order.save()
    for a in admins:
        t.send(a, '‚úî –ó–∞–∫–∞–∑ ‚Ññ' + str(order) + ': –∑–∞–≤–µ—Ä—à—ë–Ω!', ikb=[[b('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', 'order_' + str(order))]])
    t.send(order.client.idu, '‚úî –ó–∞–∫–∞–∑ ‚Ññ' + str(order) + ': –∑–∞–≤–µ—Ä—à—ë–Ω!\nüç≤ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!\nüôã ‚Äç–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞!')
